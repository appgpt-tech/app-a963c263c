//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { LotteryEntity } from './db/Lottery.entity';
import { ChessEntity } from './db/Chess.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [SettingsEntity, LotteryEntity, ChessEntity];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Lottery: [
        {
          ticketNumber: 1,
          drawDate: '2024-09-04T15:44:51.218Z',
          prizeAmount: 0.64,
          winner: 1,
          id: 22,
        },
        {
          ticketNumber: 2,
          drawDate: '2024-01-15T02:54:20.920Z',
          prizeAmount: 0.48,
          winner: 2,
          id: 98,
        },
        {
          ticketNumber: 3,
          drawDate: '2023-05-29T21:14:59.934Z',
          prizeAmount: 0.76,
          winner: 3,
          id: 28,
        },
        {
          ticketNumber: 4,
          drawDate: '2024-11-14T15:13:33.818Z',
          prizeAmount: 0.52,
          winner: 4,
          id: 5,
        },
        {
          ticketNumber: 5,
          drawDate: '2024-03-06T05:56:49.098Z',
          prizeAmount: 0,
          winner: 5,
          id: 68,
        },
      ],
      Chess: [
        {
          gameId: 1,
          player1Name: 1,
          player2Name: 1,
          winnerName: 1,
          gameDuration: 0.71,
          datePlayed: '2024-02-01T15:23:11.400Z',
          monthlyRanking: 1,
          id: 85,
        },
        {
          gameId: 2,
          player1Name: 2,
          player2Name: 2,
          winnerName: 2,
          gameDuration: 0.66,
          datePlayed: '2023-10-25T21:48:06.788Z',
          monthlyRanking: 2,
          id: 91,
        },
        {
          gameId: 3,
          player1Name: 3,
          player2Name: 3,
          winnerName: 3,
          gameDuration: 0.64,
          datePlayed: '2024-01-14T07:28:38.341Z',
          monthlyRanking: 3,
          id: 38,
        },
        {
          gameId: 4,
          player1Name: 4,
          player2Name: 4,
          winnerName: 4,
          gameDuration: 0.37,
          datePlayed: '2023-12-25T06:35:13.538Z',
          monthlyRanking: 4,
          id: 50,
        },
        {
          gameId: 5,
          player1Name: 5,
          player2Name: 5,
          winnerName: 5,
          gameDuration: 0.96,
          datePlayed: '2023-09-20T19:32:52.517Z',
          monthlyRanking: 5,
          id: 99,
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('LotteryEntity', data.Lottery);
      await this.SeedResource('ChessEntity', data.Chess);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
